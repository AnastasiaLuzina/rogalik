from colorama import Fore, Back, Style 
from map import MAP_WIDTH, MAP_HEIGHT
import re
import curses

PANEL_WIDTH = 35
HEALTH_HEIGHT = 7
INTERACTION_HEIGHT = MAP_HEIGHT - HEALTH_HEIGHT - 1

class HealthPanel:
    def __init__(self, x: int, y: int, width: int, height: int, 
                 current_hp: int, max_hp: int, 
                 killed_enemies: int = 0, total_enemies: int = 0):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.current_hp = current_hp
        self.max_hp = max_hp
        self.killed_enemies = killed_enemies  # –£–±–∏—Ç—ã–µ –≤—Ä–∞–≥–∏
        self.total_enemies = total_enemies   # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤

    def render(self, screen):
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–º–∫–∏
        screen.addstr(self.y, self.x, '‚ïî' + '‚ïê'*(self.width-2) + '‚ïó')
        for dy in range(1, self.height-1):
            screen.addstr(self.y + dy, self.x, '‚ïë' + ' '*(self.width-2) + '‚ïë')
        screen.addstr(self.y + self.height - 1, self.x, '‚ïö' + '‚ïê'*(self.width-2) + '‚ïù')
        
        # –¢–µ–∫—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
        current_hp = max(0, min(self.current_hp, self.max_hp))
        hp_text = f"HP: {current_hp}/{self.max_hp}"
        hp_percent = current_hp / self.max_hp
        bar_width = self.width - 3
        filled = int(bar_width * hp_percent)
        health_bar = '‚ñà'*filled + '‚ñë'*(bar_width-filled)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        screen.addstr(self.y + 1, self.x + 1, hp_text.center(self.width-2))
        screen.addstr(self.y + 2, self.x + 1, health_bar, curses.color_pair(3))
        
        # –ù–æ–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —É–±–∏—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemy_icon = "üíÄ"  # –°–∏–º–≤–æ–ª —á–µ—Ä–µ–ø–∞
        enemy_count_text = f"{enemy_icon} {self.killed_enemies}/{self.total_enemies}"  # –î—Ä–æ–±—å
        formatted_text = enemy_count_text.ljust(self.width-2)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
        if self.killed_enemies > 0:
            color_pair = 4 if (self.killed_enemies % 2 == 0) else 5  # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞
        else:
            color_pair = 4
            
        screen.addstr(self.y + 4, self.x + 1, formatted_text, 
                     curses.color_pair(color_pair) | curses.A_BOLD)

class InteractionPanel:
    def __init__(self, x: int, y: int, width: int, height: int):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.messages = []
        self.show_pickup = False

    def add_message(self, message: str):
        max_length = self.width - 2
        if len(message) > max_length:
            message = message[:max_length-3] + '...'
        self.messages.append(message)
        if len(self.messages) > self.height - 2:
            self.messages.pop(0)

    def show_inventory(self, items, active_slot):
        self.messages.clear()
        self.messages.append(("–ò–ù–í–ï–ù–¢–ê–†–¨ (TAB - –∑–∞–∫—Ä—ã—Ç—å)", curses.color_pair(6)))
        
        # –°–ª–æ—Ç—ã
        for slot in range(1, 9):
            item = items.get(slot)
            color = curses.color_pair(6) if slot == active_slot else curses.color_pair(2)
            prefix = "> " if slot == active_slot else "  "
            text = f"{prefix}–°–ª–æ—Ç {slot}: {item.title if item else '–ü—É—Å—Ç–æ'}"
            self.messages.append((text, color))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.messages.append(("[E] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å  [R] –í—ã–±—Ä–æ—Å–∏—Ç—å", curses.color_pair(5)))


    def show_pickup_button(self, count):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–±–æ—Ä–∞"""
        self.messages = [f"[F] –ü–æ–¥–æ–±—Ä–∞—Ç—å ({count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)"]

    def hide_pickup_button(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–±–æ—Ä–∞"""
        if self.messages and "[F] –ü–æ–¥–æ–±—Ä–∞—Ç—å" in self.messages[0]:
            self.messages.clear()
            
    def render(self, screen):
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–º–∫–∏
        screen.addstr(self.y, self.x, '‚ïî' + '‚ïê'*(self.width-2) + '‚ïó')
        for i in range(1, self.height-1):
            screen.addstr(self.y + i, self.x, '‚ïë' + ' '*(self.width-2) + '‚ïë')
        screen.addstr(self.y + self.height - 1, self.x, '‚ïö' + '‚ïê'*(self.width-2) + '‚ïù')
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
        for i, msg in enumerate(self.messages):
            if isinstance(msg, tuple):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–≤–µ—Ç
                text, color = msg
                screen.addstr(self.y + 1 + i, self.x + 1, text[:self.width-2], color)
            else:
                screen.addstr(self.y + 1 + i, self.x + 1, msg[:self.width-2])