import keyboard
import random
from threading import Thread
import time

class Position:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Person:
    def __init__(self, health, symbol, position=Position(0, 0)):
        self.health = health
        self.max_health = health
        self.position = position
        self.symbol = symbol    

class Hero(Person):
    def __init__(self, health, symbol, position, inventory_size=10):
        super().__init__(health, symbol, position)
        self.inventory = Inventory(inventory_size) # –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–µ—Ä–æ–µ–º –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
    def check_item_interaction(self, item_position):
        dx = abs(self.position.x - item_position.x)
        dy = abs(self.position.y - item_position.y)
        return dx <= 1 and dy <= 1

    def pick_up_item(self, item):
        """–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç"""
        return self.inventory.add_to_active_slot(item)

    def drop_item(self):
        """–í—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        return self.inventory.remove_from_active_slot()

    def use_item(self, target=None):
        return self.inventory.use_active_item(target)

    def attack(self):
        active_item = self.inventory.get_active_item()
        if isinstance(active_item, Weapon):
            damage = active_item.use(self.inventory)
            print(f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞!")
            return damage
        print("–ù–µ—Ç –æ—Ä—É–∂–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª–æ—Ç–µ!")
        return 0

""" –ö–ª–∞—Å—Å –≤—Ä–∞–≥–æ–≤ –∏ –ò—Ö –≤–∏–¥—ã (3) """

class Enemy(Person):
    def __init__(self, health, symbol, position, damage):
        super().__init__(health, symbol, position)
        self.damage = damage

# –ù–µ–∂–∏—Ç—å ( –º–æ–∂–µ—Ç –≤–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è –¥–æ 1 —Ä–∞–∑–∞)
class Undead(Enemy):
    def __init__(self, health, symbol, position, damage):
        super().__init__(health, symbol, position, damage)
        self.can_resurrect = True

    def resurrect(self):
        if self.can_resurrect:
            self.health = 1
            self.can_resurrect = False
            return True
        return False
    
# –ü—Ä–∏–∑—Ä–∞–∫ ( –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã )
class Ghost(Enemy):
    def __init__(self, health, symbol, position, damage):
        super().__init__(health, symbol, position, damage)
        self.is_phased = True

# –¢—ë–º–Ω—ã–π –º–∞–≥ ( —Ä–∞–∑ –≤ 3 —Ö–æ–¥–∞ –∫–∞—Å—Ç—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ )
class DarkMage(Enemy):
    def __init__(self, health, symbol, position, damage):
        super().__init__(health, symbol, position, damage)
        self.spell_damage = damage * 2  # —É—Ä–æ–Ω –æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ)
        self.spell_cooldown = 0

    def cast_spell(self):
        if self.spell_cooldown > 0:
            self.spell_cooldown -= 1
            return 0
        self.spell_cooldown = 3
        return self.spell_damage
    
""" –ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∏ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –Ω–∏—Ö """

class Inventory:
    def __init__(self, count_of_slots):
        self.count_of_slots = count_of_slots
        self.items = {}
        self.active_slot = 1
        self._running = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫—Ä—ã—Ç
        self._setup_keyboard()

    def _setup_keyboard(self):
        def listener():
            while True:
                if self._running:  # –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç
                    keyboard.on_press_key("left", lambda _: self._change_slot(-1), suppress=True)
                    keyboard.on_press_key("right", lambda _: self._change_slot(1), suppress=True)
                    keyboard.on_press_key("e", lambda _: self.use_active_item(), suppress=True)
                keyboard.wait("tab")  # –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è Tab
                self.toggle()  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å

        Thread(target=listener, daemon=True).start()

    def toggle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–æ—Ç–∫—Ä—ã—Ç/–∑–∞–∫—Ä—ã—Ç)"""
        self._running = not self._running
        status = "–æ—Ç–∫—Ä—ã—Ç" if self._running else "–∑–∞–∫—Ä—ã—Ç"
        print(f"\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {status}. –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç: {self.active_slot}")

    def _change_slot(self, direction):
        new_slot = self.active_slot + direction
        if 1 <= new_slot <= self.count_of_slots:
            self.active_slot = new_slot
            print(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Å–ª–æ—Ç –Ω–æ–º–µ—Ä {self.active_slot}")

    def add_to_active_slot(self, item):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç"""
        if self.active_slot in self.items:
            print(f"–°–ª–æ—Ç –Ω–æ–º–µ—Ä {self.active_slot} —É–∂–µ –∑–∞–Ω—è—Ç!")
            return False
            
        self.items[self.active_slot] = item
        print(f"{item.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç –Ω–æ–º–µ—Ä {self.active_slot}")
        return True

    def remove_from_active_slot(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        if self.active_slot not in self.items:
            print(f"–°–ª–æ—Ç {self.active_slot} –ø—É—Å—Ç!")
            return None
            
        item = self.items.pop(self.active_slot)
        print(f"{item.title} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ª–æ—Ç–∞ –Ω–æ–º–µ—Ä {self.active_slot}")
        return item
    
    def get_active_item(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–ª–∏ None"""
        return self.items.get(self.active_slot)

    def use_active_item(self, target=None):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        item = self.get_active_item()
        
        if not item:
            print("–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç –ø—É—Å—Ç!")
            return False
        
        if isinstance(item, Weapon):
            damage = item.use(self)
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ—Ä—É–∂–∏–µ {item.title}! –£—Ä–æ–Ω: {damage}")
            return damage
            
        elif isinstance(item, HealthPotion):
            if not target:
                print("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è –∑–µ–ª—å—è!")
                return False
            item.use(target, self)
            return True
            
        elif isinstance(item, Shield):
            print(f"–©–∏—Ç {item.title} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            return True
            
        elif isinstance(item, PoisonPotion):
            if not target:
                print("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è —è–¥–∞!")
                return False
            item.use(target, self)
            return True
            
        return False
    
class Items:
    def __init__(self, title, type, symbol):
        self.title = title
        self.type = type
        self.symbol = symbol
        
    def _break_and_remove(self, inventory):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        if hasattr(self, 'durability') and self.durability <= 0 and inventory:
            for slot, item in inventory.items.items():
                if item == self:
                    del inventory.items[slot]
                    print(f"{self.title} —Å–ª–æ–º–∞–ª—Å—è –∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!")
                    return True
        return False

class Weapon(Items):
    def __init__(self, title, type, symbol, damage, durability):
        super().__init__(title, type, symbol)
        self.damage = damage
        self.durability = durability
        self.max_durability = durability
        
    def use(self, inventory=None):
        if self.durability > 0:
            self.durability -= 1
            self._break_and_remove(inventory)
            return self.damage
        return 0

class Sword(Weapon):
    def __init__(self, title, damage, symbol, durability=70):
        super().__init__(title, "melee", symbol, damage, durability)
        self.combo_counter = 0
        
    def use(self, inventory=None):
        damage = super().use(inventory)
        self.combo_counter += 1
        if self.combo_counter % 3 == 0:
            print(f"‚öîÔ∏è –ö–æ–º–±–æ-—É–¥–∞—Ä! –£—Ä–æ–Ω x2")
            return damage * 2
        return damage

class Bow(Weapon):
    def __init__(self, title, damage, symbol, range=5, durability=30):
        super().__init__(title, "ranged", symbol, damage, durability)
        self.range = range
        
    def use(self, inventory=None):
        damage = super().use(inventory)
        if random.random() < 0.25:
            print(f"üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª! –£—Ä–æ–Ω x1.5")
            return int(damage * 1.5)
        return damage

class IceStaff(Weapon):
    def __init__(self, title, damage, symbol, range=3, durability=50):
        super().__init__(title, "magic", symbol, damage, durability)
        self.combo_counter = 0
        self.range = range
    
    def use(self, inventory=None):
        damage = super().use(inventory)
        self.combo_counter += 1
        if self.combo_counter % 3 == 0:
            print(f"‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª! –£—Ä–æ–Ω x3")
            return damage * 3
        return damage

class Shield(Items):
    def __init__(self, title, save_from_damage, symbol, durability=20):
        super().__init__(title, "armor", symbol)
        self.save_from_damage = save_from_damage
        self.durability = durability
        self.max_durability = durability
        
    def block(self, damage, inventory=None):
        if self.durability <= 0:
            return damage
        blocked = min(damage, self.save_from_damage)
        self.durability -= 1
        self._break_and_remove(inventory)
        return damage - blocked

class HealthPotion(Items):
    def __init__(self, title, heal_amount, symbol, durability=1):  # –ø—Ä–æ—á–Ω–æ—Å—Ç—å 1 - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
        super().__init__(title, "heal_potion", symbol)
        self.heal_amount = heal_amount
        self.durability = durability
        self.max_durability = durability

    def use(self, target, inventory=None):
        if self.durability <= 0:
            return 0
            
        heal = self.heal_amount
        self.durability -= 1
        target.health += heal
        print(f"{target.symbol} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {heal} HP!")
        
        self._break_and_remove(inventory)
        return heal

class PoisonPotion(Items):
    def __init__(self, title, damage_per_turn, symbol, duration, durability=1):
        super().__init__(title, "poison_potion", symbol)
        self.damage_per_turn = damage_per_turn
        self.duration = duration
        self.durability = durability
        self.max_durability = durability

    def use(self, target, inventory=None):
        if self.durability <= 0:
            return 0
            
        self.durability -= 1
        target.apply_effect("poison", self.damage_per_turn, self.duration)
        print(f"{target.symbol} –æ—Ç—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.duration} —Ö–æ–¥–æ–≤!")
        
        self._break_and_remove(inventory)
        return self.damage_per_turn * self.duration  


sword = Sword(title="–ú–µ—á", damage=20, symbol="‚öîÔ∏è")
bow = Bow(title="–õ—É–∫", damage=15, symbol="üèπ", range=5)
ice_staff = IceStaff(title="–õ–µ–¥—è–Ω–æ–π –ø–æ—Å–æ—Ö", damage=25, symbol="‚ùÑÔ∏è", range=3)
shield = Shield(title="–©–∏—Ç", save_from_damage=10, symbol="üõ°Ô∏è")
health_potion = HealthPotion(title="–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", heal_amount=30, symbol="‚ù§Ô∏è")
poison_potion = PoisonPotion(title="–Ø–¥–æ–≤–∏—Ç–æ–µ –∑–µ–ª—å–µ", damage_per_turn=5, symbol="üß™", duration=3)

undead = Undead(health=40, symbol="üíÄ", position=Position(1, 1), damage=10)
ghost = Ghost(health=50, symbol="üëª", position=Position(2, 2), damage=15)
dark_mage = DarkMage(health=80, symbol="üßô", position=Position(3, 3), damage=15)

hero = Hero(100, "@", Position(0, 0))
hero.inventory = Inventory(10)

print("–ù–∞–∂–º–∏—Ç–µ Tab —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
while True:
    time.sleep(1)